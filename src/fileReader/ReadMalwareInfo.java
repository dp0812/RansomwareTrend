package fileReader;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;

import entities.Malware;
import utilities.Parser;

/**
 * Reads data from csv, created malware objects, create 3 ArrayList representation: 
 * one contains the malware objects, 
 * one contains String array form of the dataset,
 * one contains the writable objects (use in writing to file).
 */
public class ReadMalwareInfo implements CsvReader {
    /** stores any file lines that are read */
    private ArrayList <String[]> fileContent = new ArrayList<>();
    /** stores malware objects taken from the file read */
    private ArrayList <Malware> malwareArrayList = new ArrayList<>();
    /** stores writable version of malware objects taken from the file read */
    private ArrayList <WritableObject> writableMalwareArrayList = new ArrayList<>();
    /** for creating the objects no matter how much the order of the columns in the csv has changed */
    private LinkedHashMap <String, Integer> categoryTable = new LinkedHashMap<>();
    
    /**
     * Accepts a file name, read from said csv file using BufferedReader and add the content to ArrayList of String array. 
     * This method ignore a certain set of lines hardcoded. 
     */
    public final void readCsvFile(String filePath){
        try(InputStream inputStream = getClass().getClassLoader().getResourceAsStream(filePath);
            BufferedReader input = new BufferedReader( new InputStreamReader(inputStream))){
            String line ="";
            for (int i = 0; i < 8; i++) line = input.readLine(); //skip 8 lines of credit - temporary fix. 
            String categoryLine = input.readLine(); //this is the category line
            String[] categoryArr = Parser.simpleParser(categoryLine, ',');
            setCategoryTableContentForReadFile(categoryArr);
        
            while (((line = input.readLine())!= null)  && ((line.charAt(0))!='#')){
                String[] arr = Parser.simpleParser(line, ',');
                fileContent.add(arr);
            }

        }catch (NullPointerException errNull) {
            System.out.println("Unintialized resouce for InputStream: " + errNull);
        }catch (IOException errIO){
            System.out.println("Failed to open file: " + errIO);
        }
    }
    
    /** Simple per line information from file. In this class specifically: the content is enclosed in quote marks. */
    public final ArrayList<String[]> getFileContent(){
        return this.fileContent; 
    }

    /** 
     * Gets the processed list of malware objects.
     * @return the ArrayList of malware objects
     */
    public final ArrayList<Malware> getMalwareArrayList(){
        processList();
        return this.malwareArrayList;
    }

    /** Gets the writable list of writable malware objects. */
    public final ArrayList<WritableObject> getWritableArrayList(){
        processList();
        return this.writableMalwareArrayList;
    }

    /** Gets the Malware category line. */
    public final String[] getCategoryLine(){
        return Malware.getVisualizationInfoArray(malwareArrayList.get(0));
    }

    /** 
     * Processes the file content list to create malware objects for each line and update 2 arrayList: 
     * malwareArrayList and writableMalwareArrayList
     */
    private void processList(){
        for (String[] someLine : fileContent){
            Malware malwareObject = createMalwareObject(someLine);
            WritableObject writableMalwareObject = createMalwareObject(someLine);
            malwareArrayList.add(malwareObject);
            writableMalwareArrayList.add(writableMalwareObject);
        }
    }

    /**
     * Initialize the attribute categoryTable: key: category name, value: index of data.  
     * index of data is the index of required data in the rows excluding the category row in the csv. 
     * categoryTable.get(key) with key as a string (a category) will return the correct index in the csv
     * @param arr string array representation of the category name in the csv
     */
    private void setCategoryTableContentForReadFile(String[] arr){
        int index  = 0;
        for (String category: arr){ 
            this.categoryTable.put(category.replaceAll("\"","" ), index++);
        }
        System.out.println(categoryTable.toString());
    }
    /** 
     * Creates the Malware objects with the given info from the file.
     * @param someLine the file line stored as a string array
     */
    private Malware createMalwareObject(String[] someLine){
        Malware malwareObject = new Malware(
            someLine[categoryTable.get("first_seen_utc").intValue()],
            someLine[categoryTable.get("sha256_hash").intValue()],
            someLine[categoryTable.get("reporter").intValue()],
            someLine[categoryTable.get("file_name").intValue()],
            someLine[categoryTable.get("file_type_guess").intValue()],
            someLine[categoryTable.get("mime_type").intValue()],
            someLine[categoryTable.get("signature").intValue()]

        );
        return malwareObject;
    }

}
